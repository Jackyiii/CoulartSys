<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Video Call Demo</title>

    <style type="text/css">
        * {
            font-family: sans-serif;
        }
        
        h1,
        h4 {
            text-align: center;
        }
        
        #remote-container video {
            height: auto;
            position: relative !important;
        }
        
        #me {
            position: relative;
            width: 50%;
            margin: 0 auto;
            display: block;
        }
        
        #me video {
            position: relative !important;
        }
        
        #remote-container {
            display: flex;
        }
    </style>
</head>

<body>
    <form>
        <input type="text" id="uid" name="uid">uid
        <input type="text" id="channel" name="channel">channel
        <input type="text" id="token" name="token">token

    </form>
    <div id="submit">提交</div>
    <h1>
        Video Call Demo<br><small style="font-size: 14pt">Powered by Agora.io</small>
    </h1>

    <h4>My Feed :</h4>
    <div id="me"></div>

    <h4>Remote Feeds :</h4>
    <div id="remote-container">

    </div>
    <h4>Canvas :</h4>
    <div id="canvas-container">

    </div>

    <script type="text/javascript" src="/scripts/AgoraRTCSDK-3.3.0.js"></script>
    <script type="text/javascript">
        var oSubmit = document.querySelector("#submit");
        var oUid = document.querySelector("#uid");
        var oChannel = document.querySelector("#channel");
        var oToken = document.querySelector("#token");
        /**
         * @name handleFail
         * @param err - error thrown by any function
         * @description Helper function to handle errors
         */
        let handleFail = function(err) {
            console.log("Error : ", err);
        };

        // Queries the container in which the remote feeds belong
        let remoteContainer = document.getElementById("remote-container");
        let canvasContainer = document.getElementById("canvas-container");
        /**
         * @name addVideoStream
         * @param streamId
         * @description Helper function to add the video stream to "remote-container"
         */
        function addVideoStream(streamId) {
            let streamDiv = document.createElement("div"); // Create a new div for every stream
            streamDiv.id = streamId; // Assigning id to div
            streamDiv.style.transform = "rotateY(180deg)"; // Takes care of lateral inversion (mirror image)
            remoteContainer.appendChild(streamDiv); // Add new div to container
        }
        /**
         * @name removeVideoStream
         * @param evt - Remove event
         * @description Helper function to remove the video stream from "remote-container"
         */
        function removeVideoStream(evt) {
            let stream = evt.stream;
            stream.stop();
            let remDiv = document.getElementById(stream.getId());
            remDiv.parentNode.removeChild(remDiv);
            console.log("Remote stream is removed " + stream.getId());
        }

        function addCanvas(streamId) {
            let canvas = document.createElement("canvas");
            canvas.id = 'canvas' + streamId;
            canvasContainer.appendChild(canvas);
            let ctx = canvas.getContext('2d');
            let video = document.getElementById(`video${streamId}`);

            video.addEventListener('loadedmetadata', function() {
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
            });

            video.addEventListener('play', function() {
                var $this = this; //cache
                (function loop() {
                    if (!$this.paused && !$this.ended) {
                        ctx.drawImage($this, 0, 0);
                        setTimeout(loop, 1000 / 30); // drawing at 30fps
                    }
                })();
            }, 0);
        }

        // Client Setup
        // Defines a client for RTC
        let client = AgoraRTC.createClient({
            mode: 'live',
            codec: "h264"
        });
        oSubmit.onclick = function() {
            alert("success with submit");
            alert(oUid.value);
            alert(oChannel.value);
            alert(oToken.value);
            // Client Setup
            // Defines a client for Real Time Communication
            client.init("cfa1560903554b69b61218c1872349c9", () => console.log("AgoraRTC client initialized"), handleFail);
            let uid = parseInt(oUid.value);
            let channel = oChannel.value;
            let token = oToken.value;
            // The client joins the channel
            client.join(token, channel, uid, (uid) => {

                // Stream object associated with your web cam is initialized
                let localStream = AgoraRTC.createStream({
                    streamID: uid,
                    audio: false,
                    video: true,
                    screen: false
                });

                // Associates the stream to the client
                localStream.init(function() {

                    //Plays the localVideo
                    localStream.play('me');

                    //Publishes the stream to the channel
                    client.publish(localStream, handleFail);

                }, handleFail);

            }, handleFail);
            //When a stream is added to a channel
            client.on('stream-added', function(evt) {
                client.subscribe(evt.stream, handleFail);
            });
            //When you subscribe to a stream
            client.on('stream-subscribed', function(evt) {
                let stream = evt.stream;
                addVideoStream(stream.getId());
                stream.play(stream.getId());
                addCanvas(stream.getId());
            });
            //When a person is removed from the stream
            client.on('stream-removed', removeVideoStream);
            client.on('peer-leave', removeVideoStream);

        }
    </script>
</body>

</html>